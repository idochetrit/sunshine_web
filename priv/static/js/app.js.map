{"version":3,"sources":["js/app.js","js/socket.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/DA;AAAA","file":"../priv/static/js/app.js","sourcesContent":["// Brunch automatically concatenates all files in your\n// watched paths. Those paths can be configured at\n// config.paths.watched in \"brunch-config.js\".\n//\n// However, those files will only be executed if\n// explicitly imported. The only exception are files\n// in vendor, which are never wrapped in imports and\n// therefore are always executed.\n\n// Import dependencies\n//\n// If you no longer want to use a dependency, remember\n// to also remove its path from \"config.paths.watched\".\n\n// Import local files\n//\n// Local files can be imported directly using relative\n// paths \"./socket\" or full ones \"web/static/js/socket\".\n\n// import socket from \"./socket\"\n\"use strict\";\n","// // NOTE: The contents of this file will only be executed if\n// // you uncomment its entry in \"assets/js/app.js\".\n\n// // To use Phoenix channels, the first step is to import Socket\n// // and connect at the socket path in \"lib/web/endpoint.ex\":\n// import {Socket} from \"phoenix\"\n\n// let socket = new Socket(\"/socket\", {params: {token: window.userToken}})\n\n// // When you connect, you'll often need to authenticate the client.\n// // For example, imagine you have an authentication plug, `MyAuth`,\n// // which authenticates the session and assigns a `:current_user`.\n// // If the current user exists you can assign the user's token in\n// // the connection for use in the layout.\n// //\n// // In your \"lib/web/router.ex\":\n// //\n// //     pipeline :browser do\n// //       ...\n// //       plug MyAuth\n// //       plug :put_user_token\n// //     end\n// //\n// //     defp put_user_token(conn, _) do\n// //       if current_user = conn.assigns[:current_user] do\n// //         token = Phoenix.Token.sign(conn, \"user socket\", current_user.id)\n// //         assign(conn, :user_token, token)\n// //       else\n// //         conn\n// //       end\n// //     end\n// //\n// // Now you need to pass this token to JavaScript. You can do so\n// // inside a script tag in \"lib/web/templates/layout/app.html.eex\":\n// //\n// //     <script>window.userToken = \"<%= assigns[:user_token] %>\";</script>\n// //\n// // You will need to verify the user token in the \"connect/2\" function\n// // in \"lib/web/channels/user_socket.ex\":\n// //\n// //     def connect(%{\"token\" => token}, socket) do\n// //       # max_age: 1209600 is equivalent to two weeks in seconds\n// //       case Phoenix.Token.verify(socket, \"user socket\", token, max_age: 1209600) do\n// //         {:ok, user_id} ->\n// //           {:ok, assign(socket, :user, user_id)}\n// //         {:error, reason} ->\n// //           :error\n// //       end\n// //     end\n// //\n// // Finally, pass the token on connect as below. Or remove it\n// // from connect if you don't care about authentication.\n\n// socket.connect()\n\n// // Now that you are connected, you can join channels with a topic:\n// let channel = socket.channel(\"topic:subtopic\", {})\n// channel.join()\n//   .receive(\"ok\", resp => { console.log(\"Joined successfully\", resp) })\n//   .receive(\"error\", resp => { console.log(\"Unable to join\", resp) })\n\n// export default socket\n\"use strict\";\n"]}